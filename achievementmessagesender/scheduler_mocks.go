// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler.go

// Package achievementmessagesender is a generated GoMock package.
package achievementmessagesender

import (
	context "context"
	reflect "reflect"
	time "time"

	model "github.com/Tap-Team/kurilka/achievementmessagesender/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAchievementMessageSenderAtTime is a mock of AchievementMessageSenderAtTime interface.
type MockAchievementMessageSenderAtTime struct {
	ctrl     *gomock.Controller
	recorder *MockAchievementMessageSenderAtTimeMockRecorder
}

// MockAchievementMessageSenderAtTimeMockRecorder is the mock recorder for MockAchievementMessageSenderAtTime.
type MockAchievementMessageSenderAtTimeMockRecorder struct {
	mock *MockAchievementMessageSenderAtTime
}

// NewMockAchievementMessageSenderAtTime creates a new mock instance.
func NewMockAchievementMessageSenderAtTime(ctrl *gomock.Controller) *MockAchievementMessageSenderAtTime {
	mock := &MockAchievementMessageSenderAtTime{ctrl: ctrl}
	mock.recorder = &MockAchievementMessageSenderAtTimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAchievementMessageSenderAtTime) EXPECT() *MockAchievementMessageSenderAtTimeMockRecorder {
	return m.recorder
}

// CancelSendMessagesForUser mocks base method.
func (m *MockAchievementMessageSenderAtTime) CancelSendMessagesForUser(ctx context.Context, userId int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CancelSendMessagesForUser", ctx, userId)
}

// CancelSendMessagesForUser indicates an expected call of CancelSendMessagesForUser.
func (mr *MockAchievementMessageSenderAtTimeMockRecorder) CancelSendMessagesForUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSendMessagesForUser", reflect.TypeOf((*MockAchievementMessageSenderAtTime)(nil).CancelSendMessagesForUser), ctx, userId)
}

// SendMessageAtTime mocks base method.
func (m *MockAchievementMessageSenderAtTime) SendMessageAtTime(ctx context.Context, userId int64, messageData model.AchievementMessageData, t time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMessageAtTime", ctx, userId, messageData, t)
}

// SendMessageAtTime indicates an expected call of SendMessageAtTime.
func (mr *MockAchievementMessageSenderAtTimeMockRecorder) SendMessageAtTime(ctx, userId, messageData, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageAtTime", reflect.TypeOf((*MockAchievementMessageSenderAtTime)(nil).SendMessageAtTime), ctx, userId, messageData, t)
}
