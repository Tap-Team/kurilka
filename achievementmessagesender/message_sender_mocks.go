// Code generated by MockGen. DO NOT EDIT.
// Source: message_sender.go

// Package achievementmessagesender is a generated GoMock package.
package achievementmessagesender

import (
	context "context"
	reflect "reflect"

	model "github.com/Tap-Team/kurilka/achievementmessagesender/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAchievementMessageSender is a mock of AchievementMessageSender interface.
type MockAchievementMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockAchievementMessageSenderMockRecorder
}

// MockAchievementMessageSenderMockRecorder is the mock recorder for MockAchievementMessageSender.
type MockAchievementMessageSenderMockRecorder struct {
	mock *MockAchievementMessageSender
}

// NewMockAchievementMessageSender creates a new mock instance.
func NewMockAchievementMessageSender(ctrl *gomock.Controller) *MockAchievementMessageSender {
	mock := &MockAchievementMessageSender{ctrl: ctrl}
	mock.recorder = &MockAchievementMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAchievementMessageSender) EXPECT() *MockAchievementMessageSenderMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockAchievementMessageSender) SendMessage(ctx context.Context, userId int64, messageData model.AchievementMessageData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, userId, messageData)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockAchievementMessageSenderMockRecorder) SendMessage(ctx, userId, messageData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockAchievementMessageSender)(nil).SendMessage), ctx, userId, messageData)
}
