// Code generated by MockGen. DO NOT EDIT.
// Source: message_sender.go

// Package messagesender is a generated GoMock package.
package messagesender

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockMessageSender is a mock of MessageSender interface.
type MockMessageSender struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderMockRecorder
}

// MockMessageSenderMockRecorder is the mock recorder for MockMessageSender.
type MockMessageSenderMockRecorder struct {
	mock *MockMessageSender
}

// NewMockMessageSender creates a new mock instance.
func NewMockMessageSender(ctrl *gomock.Controller) *MockMessageSender {
	mock := &MockMessageSender{ctrl: ctrl}
	mock.recorder = &MockMessageSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSender) EXPECT() *MockMessageSenderMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockMessageSender) SendMessage(ctx context.Context, message string, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", ctx, message, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockMessageSenderMockRecorder) SendMessage(ctx, message, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockMessageSender)(nil).SendMessage), ctx, message, userId)
}

// MockMessageSenderAtTime is a mock of MessageSenderAtTime interface.
type MockMessageSenderAtTime struct {
	ctrl     *gomock.Controller
	recorder *MockMessageSenderAtTimeMockRecorder
}

// MockMessageSenderAtTimeMockRecorder is the mock recorder for MockMessageSenderAtTime.
type MockMessageSenderAtTimeMockRecorder struct {
	mock *MockMessageSenderAtTime
}

// NewMockMessageSenderAtTime creates a new mock instance.
func NewMockMessageSenderAtTime(ctrl *gomock.Controller) *MockMessageSenderAtTime {
	mock := &MockMessageSenderAtTime{ctrl: ctrl}
	mock.recorder = &MockMessageSenderAtTimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageSenderAtTime) EXPECT() *MockMessageSenderAtTimeMockRecorder {
	return m.recorder
}

// SendMessageAtTime mocks base method.
func (m *MockMessageSenderAtTime) SendMessageAtTime(ctx context.Context, message string, userId int64, t time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SendMessageAtTime", ctx, message, userId, t)
}

// SendMessageAtTime indicates an expected call of SendMessageAtTime.
func (mr *MockMessageSenderAtTimeMockRecorder) SendMessageAtTime(ctx, message, userId, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessageAtTime", reflect.TypeOf((*MockMessageSenderAtTime)(nil).SendMessageAtTime), ctx, message, userId, t)
}
