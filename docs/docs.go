// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/achievements": {
            "get": {
                "description": "return all achievements that exists, if user not reach achievement reachDate is zero, is user not open achievement openDate is zero",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "achievements"
                ],
                "summary": "UserAchievements",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/achievementmodel.Achievement"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errormodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/achievements/mark-shown": {
            "post": {
                "description": "set on all reach achievements show = true",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "achievements"
                ],
                "summary": "MarkShown",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errormodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/achievements/open-single": {
            "post": {
                "description": "open single achievement by user and achievement ids",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "achievements"
                ],
                "summary": "OpenSingle",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "achievement id",
                        "name": "achievementId",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errormodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/achievements/user-reached": {
            "get": {
                "description": "get user reached achievements",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "achievements"
                ],
                "summary": "UserReachedAchievements",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.ReachedAchievements"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errormodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/privacysettings": {
            "get": {
                "description": "get user privacy settings",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "privacysettings"
                ],
                "summary": "GetPrivacySettingsHandler",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/usermodel.PrivacySetting"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errormodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/privacysettings/add": {
            "post": {
                "description": "add one user privacy setting, if setting exists return error",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "privacysettings"
                ],
                "summary": "AddPrivacySetting",
                "parameters": [
                    {
                        "enum": [
                            "STATISTICS_MONEY",
                            "STATISTICS_CIGARETTE",
                            "STATISTICS_LIFE",
                            "STATISTICS_TIME",
                            "ACHIEVEMENTS_DURATION",
                            "ACHIEVEMENTS_HEALTH",
                            "ACHIEVEMENTS_WELL_BEING",
                            "ACHIEVEMENTS_SAVING",
                            "ACHIEVEMENTS_CIGARETTE"
                        ],
                        "type": "string",
                        "description": "privacy setting",
                        "name": "privacySetting",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errormodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/privacysettings/remove": {
            "delete": {
                "description": "remove one user privacy setting, if setting not exists return error",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "privacysettings"
                ],
                "summary": "RemovePrivacySetting",
                "parameters": [
                    {
                        "enum": [
                            "STATISTICS_MONEY",
                            "STATISTICS_CIGARETTE",
                            "STATISTICS_LIFE",
                            "STATISTICS_TIME",
                            "ACHIEVEMENTS_DURATION",
                            "ACHIEVEMENTS_HEALTH",
                            "ACHIEVEMENTS_WELL_BEING",
                            "ACHIEVEMENTS_SAVING",
                            "ACHIEVEMENTS_CIGARETTE"
                        ],
                        "type": "string",
                        "description": "privacy setting",
                        "name": "privacySetting",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errormodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/privacysettings/switch": {
            "put": {
                "description": "add privacy setting if not exists and delete if exists",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "privacysettings"
                ],
                "summary": "SwitchPrivacySettings",
                "parameters": [
                    {
                        "enum": [
                            "STATISTICS_MONEY",
                            "STATISTICS_CIGARETTE",
                            "STATISTICS_LIFE",
                            "STATISTICS_TIME",
                            "ACHIEVEMENTS_DURATION",
                            "ACHIEVEMENTS_HEALTH",
                            "ACHIEVEMENTS_WELL_BEING",
                            "ACHIEVEMENTS_SAVING",
                            "ACHIEVEMENTS_CIGARETTE"
                        ],
                        "type": "string",
                        "description": "privacy setting",
                        "name": "privacySetting",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errormodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/statistics/cigarette": {
            "get": {
                "description": "get cigarette statistics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "statistics"
                ],
                "summary": "CigaretteStatistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.IntUserStatistics"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errormodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/statistics/money": {
            "get": {
                "description": "get money statistics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "statistics"
                ],
                "summary": "MoneyStatistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.FloatUserStatistics"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errormodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/statistics/time": {
            "get": {
                "description": "get time statistics",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "statistics"
                ],
                "summary": "TimeStatistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.IntUserStatistics"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errormodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/subscription/update": {
            "put": {
                "description": "manual update user subscription (only admin)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "UpdateUserSubscription",
                "parameters": [
                    {
                        "enum": [
                            "NONE",
                            "TRIAL",
                            "BASIC"
                        ],
                        "type": "string",
                        "description": "subscription type",
                        "name": "subscriptionType",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "time when subscription expired",
                        "name": "expired",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        },
        "/subscription/user": {
            "get": {
                "description": "get user subscription type",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "subscription"
                ],
                "summary": "UserSubscription",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usermodel.SubscriptionType"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errormodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/triggers/add": {
            "post": {
                "description": "remove user trigger, if user not exists, or trigger has been removed return error",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "triggers"
                ],
                "summary": "RemoveTrigger",
                "parameters": [
                    {
                        "enum": [
                            "THANK_YOU",
                            "SUPPORT_CIGGARETTE",
                            "SUPPORT_HEALTH",
                            "SUPPORT_TRIAL"
                        ],
                        "type": "string",
                        "description": "trigger",
                        "name": "trigger",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errormodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/triggers/remove": {
            "delete": {
                "description": "remove user trigger, if user not exists, or trigger has been removed return error",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "triggers"
                ],
                "summary": "RemoveTrigger",
                "parameters": [
                    {
                        "enum": [
                            "THANK_YOU",
                            "SUPPORT_CIGGARETTE",
                            "SUPPORT_HEALTH",
                            "SUPPORT_TRIAL"
                        ],
                        "type": "string",
                        "description": "trigger",
                        "name": "trigger",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errormodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/create": {
            "post": {
                "description": "\"create user\"",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "CreateUser",
                "parameters": [
                    {
                        "description": "create user",
                        "name": "createUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/usermodel.CreateUser"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/usermodel.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errormodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/exists": {
            "get": {
                "description": "check user exists",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "UserExists",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "boolean"
                        }
                    }
                }
            }
        },
        "/users/friends": {
            "post": {
                "description": "\"map friends id to dto list\"",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Friends",
                "parameters": [
                    {
                        "description": "list of user friends",
                        "name": "friends",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/usermodel.Friend"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errormodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/level": {
            "get": {
                "description": "\"get user level from postgres, update cache and return level\"",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "UserLevel",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usermodel.LevelInfo"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errormodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/reset": {
            "delete": {
                "description": "\"reset user data\"",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "ResetUser",
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errormodel.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/users/user": {
            "get": {
                "description": "get user by vk_user_id",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "GetUser",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/usermodel.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/errormodel.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "achievementmodel.Achievement": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "exp": {
                    "description": "количество экспы за открытие",
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "level": {
                    "description": "уровень (от 1 до 10)",
                    "type": "integer"
                },
                "openDate": {
                    "description": "дата открытия ачивки по timestamp(0) в секундах, если достижение не открыто, равняется 0",
                    "type": "integer"
                },
                "percentage": {
                    "description": "проценты до достижения (от 0 до 100), на открытых или достигнутых ачивках равняется 100",
                    "type": "integer"
                },
                "reachDate": {
                    "description": "дата достижение пользователем ачивки по timestamp(0) в секундах, если достижение не достигнуто, равняется 0",
                    "type": "integer"
                },
                "shown": {
                    "description": "была ли ачивка показана пользователю",
                    "type": "boolean"
                },
                "type": {
                    "$ref": "#/definitions/achievementmodel.AchievementType"
                }
            }
        },
        "achievementmodel.AchievementType": {
            "type": "string",
            "enum": [
                "Длительность",
                "Сигареты",
                "Здоровье",
                "Самочувствие",
                "Экономия"
            ],
            "x-enum-varnames": [
                "DURATION",
                "CIGARETTE",
                "HEALTH",
                "WELL_BEING",
                "SAVING"
            ]
        },
        "errormodel.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "model.FloatUserStatistics": {
            "type": "object",
            "properties": {
                "day": {
                    "type": "number"
                },
                "month": {
                    "type": "number"
                },
                "week": {
                    "type": "number"
                },
                "year": {
                    "type": "number"
                }
            }
        },
        "model.IntUserStatistics": {
            "type": "object",
            "properties": {
                "day": {
                    "type": "integer"
                },
                "month": {
                    "type": "integer"
                },
                "week": {
                    "type": "integer"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "model.ReachedAchievements": {
            "type": "object",
            "properties": {
                "achievementType": {
                    "$ref": "#/definitions/achievementmodel.AchievementType"
                },
                "cigarette": {
                    "type": "integer"
                },
                "duration": {
                    "type": "integer"
                },
                "health": {
                    "type": "integer"
                },
                "saving": {
                    "type": "integer"
                },
                "well-being": {
                    "type": "integer"
                }
            }
        },
        "usermodel.Achievement": {
            "type": "object",
            "properties": {
                "level": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/achievementmodel.AchievementType"
                }
            }
        },
        "usermodel.CreateUser": {
            "type": "object",
            "properties": {
                "cigaretteDayAmount": {
                    "type": "integer"
                },
                "cigarettePackAmount": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "packPrice": {
                    "type": "number"
                }
            }
        },
        "usermodel.Friend": {
            "type": "object",
            "properties": {
                "achivements": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/usermodel.Achievement"
                    }
                },
                "cigarette": {
                    "type": "integer"
                },
                "cigaretteTime": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "level": {
                    "$ref": "#/definitions/usermodel.LevelInfo"
                },
                "life": {
                    "type": "integer"
                },
                "money": {
                    "type": "number"
                },
                "privacySettings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/usermodel.PrivacySetting"
                    }
                },
                "subscriptionType": {
                    "$ref": "#/definitions/usermodel.SubscriptionType"
                },
                "time": {
                    "type": "integer"
                }
            }
        },
        "usermodel.Level": {
            "type": "integer",
            "enum": [
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10
            ],
            "x-enum-varnames": [
                "One",
                "Two",
                "Three",
                "Four",
                "Five",
                "Six",
                "Seven",
                "Eight",
                "Nine",
                "Ten"
            ]
        },
        "usermodel.LevelInfo": {
            "type": "object",
            "properties": {
                "exp": {
                    "type": "integer"
                },
                "level": {
                    "$ref": "#/definitions/usermodel.Level"
                },
                "maxExp": {
                    "type": "integer"
                },
                "minExp": {
                    "type": "integer"
                },
                "rank": {
                    "$ref": "#/definitions/usermodel.Rank"
                }
            }
        },
        "usermodel.PrivacySetting": {
            "type": "string",
            "enum": [
                "STATISTICS_MONEY",
                "STATISTICS_CIGARETTE",
                "STATISTICS_LIFE",
                "STATISTICS_TIME",
                "ACHIEVEMENTS_DURATION",
                "ACHIEVEMENTS_HEALTH",
                "ACHIEVEMENTS_WELL_BEING",
                "ACHIEVEMENTS_SAVING",
                "ACHIEVEMENTS_CIGARETTE"
            ],
            "x-enum-varnames": [
                "STATISTICS_MONEY",
                "STATISTICS_CIGARETTE",
                "STATISTICS_LIFE",
                "STATISTICS_TIME",
                "ACHIEVEMENTS_DURATION",
                "ACHIEVEMENTS_HEALTH",
                "ACHIEVEMENTS_WELL_BEING",
                "ACHIEVEMENTS_SAVING",
                "ACHIEVEMENTS_CIGARETTE"
            ]
        },
        "usermodel.Rank": {
            "type": "string",
            "enum": [
                "Новичок"
            ],
            "x-enum-varnames": [
                "Noob"
            ]
        },
        "usermodel.SubscriptionType": {
            "type": "string",
            "enum": [
                "NONE",
                "TRIAL",
                "BASIC"
            ],
            "x-enum-varnames": [
                "NONE",
                "TRIAL",
                "BASIC"
            ]
        },
        "usermodel.Trigger": {
            "type": "string",
            "enum": [
                "THANK_YOU",
                "SUPPORT_CIGGARETTE",
                "SUPPORT_HEALTH",
                "SUPPORT_TRIAL"
            ],
            "x-enum-varnames": [
                "THANK_YOU",
                "SUPPORT_CIGGARETTE",
                "SUPPORT_HEALTH",
                "SUPPORT_TRIAL"
            ]
        },
        "usermodel.User": {
            "type": "object",
            "properties": {
                "abstinenceTime": {
                    "description": "Момент когда пользователь перестал курить, просто момент времени, ты должен отнимать от текущего времени пользователя по UTC это время и получать время которое пользователь воздерживается",
                    "type": "integer"
                },
                "cigarette": {
                    "description": "Количество не выкуренных пользователем сигарет",
                    "type": "integer"
                },
                "friends": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "level": {
                    "$ref": "#/definitions/usermodel.LevelInfo"
                },
                "life": {
                    "description": "Параметр жизни пользователя, измеряется в минутах",
                    "type": "integer"
                },
                "money": {
                    "description": "Сэкономленные пользователем средства",
                    "type": "number"
                },
                "motivation": {
                    "description": "Текст Баннера мотивации",
                    "type": "string"
                },
                "name": {
                    "description": "Имя пользователя",
                    "type": "string"
                },
                "time": {
                    "description": "Время которое пользователь секономил на сигаретах, измеряется в минутах",
                    "type": "integer"
                },
                "triggers": {
                    "description": "Триггеры от которых зависит должен баннер показываться или нет",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/usermodel.Trigger"
                    }
                },
                "welcomeMotivation": {
                    "description": "Текст приветственной мотивашки",
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Kurilka API Swagger",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
