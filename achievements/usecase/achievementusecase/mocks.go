// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package achievementusecase is a generated GoMock package.
package achievementusecase

import (
	context "context"
	reflect "reflect"

	model "github.com/Tap-Team/kurilka/achievements/model"
	achievementmodel "github.com/Tap-Team/kurilka/internal/model/achievementmodel"
	usermodel "github.com/Tap-Team/kurilka/internal/model/usermodel"
	gomock "github.com/golang/mock/gomock"
)

// MockAchievementStorage is a mock of AchievementStorage interface.
type MockAchievementStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAchievementStorageMockRecorder
}

// MockAchievementStorageMockRecorder is the mock recorder for MockAchievementStorage.
type MockAchievementStorageMockRecorder struct {
	mock *MockAchievementStorage
}

// NewMockAchievementStorage creates a new mock instance.
func NewMockAchievementStorage(ctrl *gomock.Controller) *MockAchievementStorage {
	mock := &MockAchievementStorage{ctrl: ctrl}
	mock.recorder = &MockAchievementStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAchievementStorage) EXPECT() *MockAchievementStorageMockRecorder {
	return m.recorder
}

// AchievementMotivation mocks base method.
func (m *MockAchievementStorage) AchievementMotivation(ctx context.Context, achId int64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AchievementMotivation", ctx, achId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AchievementMotivation indicates an expected call of AchievementMotivation.
func (mr *MockAchievementStorageMockRecorder) AchievementMotivation(ctx, achId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AchievementMotivation", reflect.TypeOf((*MockAchievementStorage)(nil).AchievementMotivation), ctx, achId)
}

// MockSubscriptionProvider is a mock of SubscriptionProvider interface.
type MockSubscriptionProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionProviderMockRecorder
}

// MockSubscriptionProviderMockRecorder is the mock recorder for MockSubscriptionProvider.
type MockSubscriptionProviderMockRecorder struct {
	mock *MockSubscriptionProvider
}

// NewMockSubscriptionProvider creates a new mock instance.
func NewMockSubscriptionProvider(ctrl *gomock.Controller) *MockSubscriptionProvider {
	mock := &MockSubscriptionProvider{ctrl: ctrl}
	mock.recorder = &MockSubscriptionProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionProvider) EXPECT() *MockSubscriptionProviderMockRecorder {
	return m.recorder
}

// UserSubscription mocks base method.
func (m *MockSubscriptionProvider) UserSubscription(ctx context.Context, userId int64) (usermodel.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSubscription", ctx, userId)
	ret0, _ := ret[0].(usermodel.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSubscription indicates an expected call of UserSubscription.
func (mr *MockSubscriptionProviderMockRecorder) UserSubscription(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSubscription", reflect.TypeOf((*MockSubscriptionProvider)(nil).UserSubscription), ctx, userId)
}

// MockAchievementUseCase is a mock of AchievementUseCase interface.
type MockAchievementUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockAchievementUseCaseMockRecorder
}

// MockAchievementUseCaseMockRecorder is the mock recorder for MockAchievementUseCase.
type MockAchievementUseCaseMockRecorder struct {
	mock *MockAchievementUseCase
}

// NewMockAchievementUseCase creates a new mock instance.
func NewMockAchievementUseCase(ctrl *gomock.Controller) *MockAchievementUseCase {
	mock := &MockAchievementUseCase{ctrl: ctrl}
	mock.recorder = &MockAchievementUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAchievementUseCase) EXPECT() *MockAchievementUseCaseMockRecorder {
	return m.recorder
}

// MarkShown mocks base method.
func (m *MockAchievementUseCase) MarkShown(ctx context.Context, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkShown", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkShown indicates an expected call of MarkShown.
func (mr *MockAchievementUseCaseMockRecorder) MarkShown(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkShown", reflect.TypeOf((*MockAchievementUseCase)(nil).MarkShown), ctx, userId)
}

// OpenSingle mocks base method.
func (m *MockAchievementUseCase) OpenSingle(ctx context.Context, userId, achievementId int64) (*model.OpenAchievementResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenSingle", ctx, userId, achievementId)
	ret0, _ := ret[0].(*model.OpenAchievementResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenSingle indicates an expected call of OpenSingle.
func (mr *MockAchievementUseCaseMockRecorder) OpenSingle(ctx, userId, achievementId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenSingle", reflect.TypeOf((*MockAchievementUseCase)(nil).OpenSingle), ctx, userId, achievementId)
}

// UserAchievements mocks base method.
func (m *MockAchievementUseCase) UserAchievements(ctx context.Context, userId int64) ([]*achievementmodel.Achievement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAchievements", ctx, userId)
	ret0, _ := ret[0].([]*achievementmodel.Achievement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAchievements indicates an expected call of UserAchievements.
func (mr *MockAchievementUseCaseMockRecorder) UserAchievements(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAchievements", reflect.TypeOf((*MockAchievementUseCase)(nil).UserAchievements), ctx, userId)
}

// UserReachedAchievements mocks base method.
func (m *MockAchievementUseCase) UserReachedAchievements(ctx context.Context, userId int64) (model.ReachedAchievements, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserReachedAchievements", ctx, userId)
	ret0, _ := ret[0].(model.ReachedAchievements)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserReachedAchievements indicates an expected call of UserReachedAchievements.
func (mr *MockAchievementUseCaseMockRecorder) UserReachedAchievements(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserReachedAchievements", reflect.TypeOf((*MockAchievementUseCase)(nil).UserReachedAchievements), ctx, userId)
}
