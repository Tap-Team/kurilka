// Code generated by MockGen. DO NOT EDIT.
// Source: ./achievements/datamanager/userdatamanager/user.go

// Package userdatamanager is a generated GoMock package.
package userdatamanager

import (
	context "context"
	reflect "reflect"

	model "github.com/Tap-Team/kurilka/achievements/model"
	gomock "github.com/golang/mock/gomock"
)

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// User mocks base method.
func (m *MockUserStorage) User(arg0 context.Context, arg1 int64) (*model.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", arg0, arg1)
	ret0, _ := ret[0].(*model.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockUserStorageMockRecorder) User(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockUserStorage)(nil).User), arg0, arg1)
}

// MockUserCache is a mock of UserCache interface.
type MockUserCache struct {
	ctrl     *gomock.Controller
	recorder *MockUserCacheMockRecorder
}

// MockUserCacheMockRecorder is the mock recorder for MockUserCache.
type MockUserCacheMockRecorder struct {
	mock *MockUserCache
}

// NewMockUserCache creates a new mock instance.
func NewMockUserCache(ctrl *gomock.Controller) *MockUserCache {
	mock := &MockUserCache{ctrl: ctrl}
	mock.recorder = &MockUserCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCache) EXPECT() *MockUserCacheMockRecorder {
	return m.recorder
}

// User mocks base method.
func (m *MockUserCache) User(arg0 context.Context, arg1 int64) (*model.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", arg0, arg1)
	ret0, _ := ret[0].(*model.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockUserCacheMockRecorder) User(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockUserCache)(nil).User), arg0, arg1)
}

// MockUserDataManager is a mock of UserDataManager interface.
type MockUserDataManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserDataManagerMockRecorder
}

// MockUserDataManagerMockRecorder is the mock recorder for MockUserDataManager.
type MockUserDataManagerMockRecorder struct {
	mock *MockUserDataManager
}

// NewMockUserManager creates a new mock instance.
func NewMockUserManager(ctrl *gomock.Controller) *MockUserDataManager {
	mock := &MockUserDataManager{ctrl: ctrl}
	mock.recorder = &MockUserDataManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserDataManager) EXPECT() *MockUserDataManagerMockRecorder {
	return m.recorder
}

// UserData mocks base method.
func (m *MockUserDataManager) UserData(ctx context.Context, userId int64) (*model.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserData", ctx, userId)
	ret0, _ := ret[0].(*model.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserData indicates an expected call of UserData.
func (mr *MockUserDataManagerMockRecorder) UserData(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserData", reflect.TypeOf((*MockUserDataManager)(nil).UserData), ctx, userId)
}
