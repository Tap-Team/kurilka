// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package handler is a generated GoMock package.
package handler

import (
	context "context"
	reflect "reflect"

	subscription "github.com/Tap-Team/kurilka/vote/model/subscription"
	gomock "github.com/golang/mock/gomock"
)

// MockGetSubscriptionUseCase is a mock of GetSubscriptionUseCase interface.
type MockGetSubscriptionUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockGetSubscriptionUseCaseMockRecorder
}

// MockGetSubscriptionUseCaseMockRecorder is the mock recorder for MockGetSubscriptionUseCase.
type MockGetSubscriptionUseCaseMockRecorder struct {
	mock *MockGetSubscriptionUseCase
}

// NewMockGetSubscriptionUseCase creates a new mock instance.
func NewMockGetSubscriptionUseCase(ctrl *gomock.Controller) *MockGetSubscriptionUseCase {
	mock := &MockGetSubscriptionUseCase{ctrl: ctrl}
	mock.recorder = &MockGetSubscriptionUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetSubscriptionUseCase) EXPECT() *MockGetSubscriptionUseCaseMockRecorder {
	return m.recorder
}

// Subscription mocks base method.
func (m *MockGetSubscriptionUseCase) Subscription(ctx context.Context, subscriptionId string) (subscription.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscription", ctx, subscriptionId)
	ret0, _ := ret[0].(subscription.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscription indicates an expected call of Subscription.
func (mr *MockGetSubscriptionUseCaseMockRecorder) Subscription(ctx, subscriptionId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscription", reflect.TypeOf((*MockGetSubscriptionUseCase)(nil).Subscription), ctx, subscriptionId)
}

// MockChangeSubscriptionStatusUseCase is a mock of ChangeSubscriptionStatusUseCase interface.
type MockChangeSubscriptionStatusUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockChangeSubscriptionStatusUseCaseMockRecorder
}

// MockChangeSubscriptionStatusUseCaseMockRecorder is the mock recorder for MockChangeSubscriptionStatusUseCase.
type MockChangeSubscriptionStatusUseCaseMockRecorder struct {
	mock *MockChangeSubscriptionStatusUseCase
}

// NewMockChangeSubscriptionStatusUseCase creates a new mock instance.
func NewMockChangeSubscriptionStatusUseCase(ctrl *gomock.Controller) *MockChangeSubscriptionStatusUseCase {
	mock := &MockChangeSubscriptionStatusUseCase{ctrl: ctrl}
	mock.recorder = &MockChangeSubscriptionStatusUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChangeSubscriptionStatusUseCase) EXPECT() *MockChangeSubscriptionStatusUseCaseMockRecorder {
	return m.recorder
}

// ChangeSubscriptionStatus mocks base method.
func (m *MockChangeSubscriptionStatusUseCase) ChangeSubscriptionStatus(ctx context.Context, changeSubscriptionStatus subscription.ChangeSubscriptionStatus) (subscription.ChangeSubscriptionStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeSubscriptionStatus", ctx, changeSubscriptionStatus)
	ret0, _ := ret[0].(subscription.ChangeSubscriptionStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeSubscriptionStatus indicates an expected call of ChangeSubscriptionStatus.
func (mr *MockChangeSubscriptionStatusUseCaseMockRecorder) ChangeSubscriptionStatus(ctx, changeSubscriptionStatus interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSubscriptionStatus", reflect.TypeOf((*MockChangeSubscriptionStatusUseCase)(nil).ChangeSubscriptionStatus), ctx, changeSubscriptionStatus)
}

// MockSubscriptionStorage is a mock of SubscriptionStorage interface.
type MockSubscriptionStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionStorageMockRecorder
}

// MockSubscriptionStorageMockRecorder is the mock recorder for MockSubscriptionStorage.
type MockSubscriptionStorageMockRecorder struct {
	mock *MockSubscriptionStorage
}

// NewMockSubscriptionStorage creates a new mock instance.
func NewMockSubscriptionStorage(ctrl *gomock.Controller) *MockSubscriptionStorage {
	mock := &MockSubscriptionStorage{ctrl: ctrl}
	mock.recorder = &MockSubscriptionStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscriptionStorage) EXPECT() *MockSubscriptionStorageMockRecorder {
	return m.recorder
}

// UserSubscriptionId mocks base method.
func (m *MockSubscriptionStorage) UserSubscriptionId(ctx context.Context, userId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserSubscriptionId", ctx, userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserSubscriptionId indicates an expected call of UserSubscriptionId.
func (mr *MockSubscriptionStorageMockRecorder) UserSubscriptionId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserSubscriptionId", reflect.TypeOf((*MockSubscriptionStorage)(nil).UserSubscriptionId), ctx, userId)
}
