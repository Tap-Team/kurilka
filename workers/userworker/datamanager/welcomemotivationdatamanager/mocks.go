// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package welcomemotivationdatamanager is a generated GoMock package.
package welcomemotivationdatamanager

import (
	context "context"
	reflect "reflect"

	model "github.com/Tap-Team/kurilka/workers/userworker/model"
	gomock "github.com/golang/mock/gomock"
)

// MockWelcomeMotivationStorage is a mock of WelcomeMotivationStorage interface.
type MockWelcomeMotivationStorage struct {
	ctrl     *gomock.Controller
	recorder *MockWelcomeMotivationStorageMockRecorder
}

// MockWelcomeMotivationStorageMockRecorder is the mock recorder for MockWelcomeMotivationStorage.
type MockWelcomeMotivationStorageMockRecorder struct {
	mock *MockWelcomeMotivationStorage
}

// NewMockWelcomeMotivationStorage creates a new mock instance.
func NewMockWelcomeMotivationStorage(ctrl *gomock.Controller) *MockWelcomeMotivationStorage {
	mock := &MockWelcomeMotivationStorage{ctrl: ctrl}
	mock.recorder = &MockWelcomeMotivationStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWelcomeMotivationStorage) EXPECT() *MockWelcomeMotivationStorageMockRecorder {
	return m.recorder
}

// NextUserWelcomeMotivation mocks base method.
func (m *MockWelcomeMotivationStorage) NextUserWelcomeMotivation(ctx context.Context, userId int64) (model.Motivation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextUserWelcomeMotivation", ctx, userId)
	ret0, _ := ret[0].(model.Motivation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextUserWelcomeMotivation indicates an expected call of NextUserWelcomeMotivation.
func (mr *MockWelcomeMotivationStorageMockRecorder) NextUserWelcomeMotivation(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextUserWelcomeMotivation", reflect.TypeOf((*MockWelcomeMotivationStorage)(nil).NextUserWelcomeMotivation), ctx, userId)
}

// UpdateUserWelcomeMotivation mocks base method.
func (m *MockWelcomeMotivationStorage) UpdateUserWelcomeMotivation(ctx context.Context, userId int64, motivationId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserWelcomeMotivation", ctx, userId, motivationId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserWelcomeMotivation indicates an expected call of UpdateUserWelcomeMotivation.
func (mr *MockWelcomeMotivationStorageMockRecorder) UpdateUserWelcomeMotivation(ctx, userId, motivationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserWelcomeMotivation", reflect.TypeOf((*MockWelcomeMotivationStorage)(nil).UpdateUserWelcomeMotivation), ctx, userId, motivationId)
}

// MockWelcomeMotivationCache is a mock of WelcomeMotivationCache interface.
type MockWelcomeMotivationCache struct {
	ctrl     *gomock.Controller
	recorder *MockWelcomeMotivationCacheMockRecorder
}

// MockWelcomeMotivationCacheMockRecorder is the mock recorder for MockWelcomeMotivationCache.
type MockWelcomeMotivationCacheMockRecorder struct {
	mock *MockWelcomeMotivationCache
}

// NewMockWelcomeMotivationCache creates a new mock instance.
func NewMockWelcomeMotivationCache(ctrl *gomock.Controller) *MockWelcomeMotivationCache {
	mock := &MockWelcomeMotivationCache{ctrl: ctrl}
	mock.recorder = &MockWelcomeMotivationCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWelcomeMotivationCache) EXPECT() *MockWelcomeMotivationCacheMockRecorder {
	return m.recorder
}

// RemoveUserWelcomeMotivation mocks base method.
func (m *MockWelcomeMotivationCache) RemoveUserWelcomeMotivation(ctx context.Context, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserWelcomeMotivation", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserWelcomeMotivation indicates an expected call of RemoveUserWelcomeMotivation.
func (mr *MockWelcomeMotivationCacheMockRecorder) RemoveUserWelcomeMotivation(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserWelcomeMotivation", reflect.TypeOf((*MockWelcomeMotivationCache)(nil).RemoveUserWelcomeMotivation), ctx, userId)
}

// SaveUserWelcomeMotivation mocks base method.
func (m *MockWelcomeMotivationCache) SaveUserWelcomeMotivation(ctx context.Context, userId int64, welcomeMotivation string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserWelcomeMotivation", ctx, userId, welcomeMotivation)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserWelcomeMotivation indicates an expected call of SaveUserWelcomeMotivation.
func (mr *MockWelcomeMotivationCacheMockRecorder) SaveUserWelcomeMotivation(ctx, userId, welcomeMotivation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserWelcomeMotivation", reflect.TypeOf((*MockWelcomeMotivationCache)(nil).SaveUserWelcomeMotivation), ctx, userId, welcomeMotivation)
}

// MockWelcomeMotivationManager is a mock of WelcomeMotivationManager interface.
type MockWelcomeMotivationManager struct {
	ctrl     *gomock.Controller
	recorder *MockWelcomeMotivationManagerMockRecorder
}

// MockWelcomeMotivationManagerMockRecorder is the mock recorder for MockWelcomeMotivationManager.
type MockWelcomeMotivationManagerMockRecorder struct {
	mock *MockWelcomeMotivationManager
}

// NewMockWelcomeMotivationManager creates a new mock instance.
func NewMockWelcomeMotivationManager(ctrl *gomock.Controller) *MockWelcomeMotivationManager {
	mock := &MockWelcomeMotivationManager{ctrl: ctrl}
	mock.recorder = &MockWelcomeMotivationManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWelcomeMotivationManager) EXPECT() *MockWelcomeMotivationManagerMockRecorder {
	return m.recorder
}

// NextUserWelcomeMotivation mocks base method.
func (m *MockWelcomeMotivationManager) NextUserWelcomeMotivation(ctx context.Context, userId int64) (model.Motivation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextUserWelcomeMotivation", ctx, userId)
	ret0, _ := ret[0].(model.Motivation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextUserWelcomeMotivation indicates an expected call of NextUserWelcomeMotivation.
func (mr *MockWelcomeMotivationManagerMockRecorder) NextUserWelcomeMotivation(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextUserWelcomeMotivation", reflect.TypeOf((*MockWelcomeMotivationManager)(nil).NextUserWelcomeMotivation), ctx, userId)
}

// UpdateUserWelcomeMotivation mocks base method.
func (m *MockWelcomeMotivationManager) UpdateUserWelcomeMotivation(ctx context.Context, userId int64, motivation model.Motivation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserWelcomeMotivation", ctx, userId, motivation)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserWelcomeMotivation indicates an expected call of UpdateUserWelcomeMotivation.
func (mr *MockWelcomeMotivationManagerMockRecorder) UpdateUserWelcomeMotivation(ctx, userId, motivation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserWelcomeMotivation", reflect.TypeOf((*MockWelcomeMotivationManager)(nil).UpdateUserWelcomeMotivation), ctx, userId, motivation)
}
