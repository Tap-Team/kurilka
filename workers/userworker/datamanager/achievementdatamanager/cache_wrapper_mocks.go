// Code generated by MockGen. DO NOT EDIT.
// Source: cache_wrapper.go

// Package achievementdatamanager is a generated GoMock package.
package achievementdatamanager

import (
	context "context"
	reflect "reflect"
	time "time"

	achievementmodel "github.com/Tap-Team/kurilka/internal/model/achievementmodel"
	gomock "github.com/golang/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// RemoveUserAchievements mocks base method.
func (m *MockCache) RemoveUserAchievements(ctx context.Context, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserAchievements", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserAchievements indicates an expected call of RemoveUserAchievements.
func (mr *MockCacheMockRecorder) RemoveUserAchievements(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserAchievements", reflect.TypeOf((*MockCache)(nil).RemoveUserAchievements), ctx, userId)
}

// SaveUserAchievements mocks base method.
func (m *MockCache) SaveUserAchievements(ctx context.Context, userId int64, achievements []*achievementmodel.Achievement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserAchievements", ctx, userId, achievements)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserAchievements indicates an expected call of SaveUserAchievements.
func (mr *MockCacheMockRecorder) SaveUserAchievements(ctx, userId, achievements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserAchievements", reflect.TypeOf((*MockCache)(nil).SaveUserAchievements), ctx, userId, achievements)
}

// UserAchievements mocks base method.
func (m *MockCache) UserAchievements(ctx context.Context, userId int64) ([]*achievementmodel.Achievement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAchievements", ctx, userId)
	ret0, _ := ret[0].([]*achievementmodel.Achievement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAchievements indicates an expected call of UserAchievements.
func (mr *MockCacheMockRecorder) UserAchievements(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAchievements", reflect.TypeOf((*MockCache)(nil).UserAchievements), ctx, userId)
}

// MockAchievementCache is a mock of AchievementCache interface.
type MockAchievementCache struct {
	ctrl     *gomock.Controller
	recorder *MockAchievementCacheMockRecorder
}

// MockAchievementCacheMockRecorder is the mock recorder for MockAchievementCache.
type MockAchievementCacheMockRecorder struct {
	mock *MockAchievementCache
}

// NewMockAchievementCache creates a new mock instance.
func NewMockAchievementCache(ctrl *gomock.Controller) *MockAchievementCache {
	mock := &MockAchievementCache{ctrl: ctrl}
	mock.recorder = &MockAchievementCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAchievementCache) EXPECT() *MockAchievementCacheMockRecorder {
	return m.recorder
}

// ReachAchievements mocks base method.
func (m *MockAchievementCache) ReachAchievements(ctx context.Context, userId int64, reachDate time.Time, achievementsIds []int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReachAchievements", ctx, userId, reachDate, achievementsIds)
}

// ReachAchievements indicates an expected call of ReachAchievements.
func (mr *MockAchievementCacheMockRecorder) ReachAchievements(ctx, userId, reachDate, achievementsIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReachAchievements", reflect.TypeOf((*MockAchievementCache)(nil).ReachAchievements), ctx, userId, reachDate, achievementsIds)
}

// SaveUserAchievements mocks base method.
func (m *MockAchievementCache) SaveUserAchievements(ctx context.Context, userId int64, achievements []*achievementmodel.Achievement) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserAchievements", ctx, userId, achievements)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserAchievements indicates an expected call of SaveUserAchievements.
func (mr *MockAchievementCacheMockRecorder) SaveUserAchievements(ctx, userId, achievements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserAchievements", reflect.TypeOf((*MockAchievementCache)(nil).SaveUserAchievements), ctx, userId, achievements)
}

// UserAchievements mocks base method.
func (m *MockAchievementCache) UserAchievements(ctx context.Context, userId int64) ([]*achievementmodel.Achievement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAchievements", ctx, userId)
	ret0, _ := ret[0].([]*achievementmodel.Achievement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAchievements indicates an expected call of UserAchievements.
func (mr *MockAchievementCacheMockRecorder) UserAchievements(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAchievements", reflect.TypeOf((*MockAchievementCache)(nil).UserAchievements), ctx, userId)
}
