// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package achievementdatamanager is a generated GoMock package.
package achievementdatamanager

import (
	context "context"
	reflect "reflect"
	time "time"

	achievementmodel "github.com/Tap-Team/kurilka/internal/model/achievementmodel"
	gomock "github.com/golang/mock/gomock"
)

// MockAchievementStorage is a mock of AchievementStorage interface.
type MockAchievementStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAchievementStorageMockRecorder
}

// MockAchievementStorageMockRecorder is the mock recorder for MockAchievementStorage.
type MockAchievementStorageMockRecorder struct {
	mock *MockAchievementStorage
}

// NewMockAchievementStorage creates a new mock instance.
func NewMockAchievementStorage(ctrl *gomock.Controller) *MockAchievementStorage {
	mock := &MockAchievementStorage{ctrl: ctrl}
	mock.recorder = &MockAchievementStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAchievementStorage) EXPECT() *MockAchievementStorageMockRecorder {
	return m.recorder
}

// InsertUserAchievements mocks base method.
func (m *MockAchievementStorage) InsertUserAchievements(ctx context.Context, userId int64, reachDate time.Time, achievementsIds []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserAchievements", ctx, userId, reachDate, achievementsIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserAchievements indicates an expected call of InsertUserAchievements.
func (mr *MockAchievementStorageMockRecorder) InsertUserAchievements(ctx, userId, reachDate, achievementsIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserAchievements", reflect.TypeOf((*MockAchievementStorage)(nil).InsertUserAchievements), ctx, userId, reachDate, achievementsIds)
}

// UserAchievements mocks base method.
func (m *MockAchievementStorage) UserAchievements(ctx context.Context, userId int64) ([]*achievementmodel.Achievement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAchievements", ctx, userId)
	ret0, _ := ret[0].([]*achievementmodel.Achievement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAchievements indicates an expected call of UserAchievements.
func (mr *MockAchievementStorageMockRecorder) UserAchievements(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAchievements", reflect.TypeOf((*MockAchievementStorage)(nil).UserAchievements), ctx, userId)
}

// MockAchievementManager is a mock of AchievementManager interface.
type MockAchievementManager struct {
	ctrl     *gomock.Controller
	recorder *MockAchievementManagerMockRecorder
}

// MockAchievementManagerMockRecorder is the mock recorder for MockAchievementManager.
type MockAchievementManagerMockRecorder struct {
	mock *MockAchievementManager
}

// NewMockAchievementManager creates a new mock instance.
func NewMockAchievementManager(ctrl *gomock.Controller) *MockAchievementManager {
	mock := &MockAchievementManager{ctrl: ctrl}
	mock.recorder = &MockAchievementManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAchievementManager) EXPECT() *MockAchievementManagerMockRecorder {
	return m.recorder
}

// ReachAchievements mocks base method.
func (m *MockAchievementManager) ReachAchievements(ctx context.Context, userId int64, reachDate time.Time, achievementsIds []int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReachAchievements", ctx, userId, reachDate, achievementsIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReachAchievements indicates an expected call of ReachAchievements.
func (mr *MockAchievementManagerMockRecorder) ReachAchievements(ctx, userId, reachDate, achievementsIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReachAchievements", reflect.TypeOf((*MockAchievementManager)(nil).ReachAchievements), ctx, userId, reachDate, achievementsIds)
}

// UserAchievements mocks base method.
func (m *MockAchievementManager) UserAchievements(ctx context.Context, userId int64) ([]*achievementmodel.Achievement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAchievements", ctx, userId)
	ret0, _ := ret[0].([]*achievementmodel.Achievement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAchievements indicates an expected call of UserAchievements.
func (mr *MockAchievementManagerMockRecorder) UserAchievements(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAchievements", reflect.TypeOf((*MockAchievementManager)(nil).UserAchievements), ctx, userId)
}
