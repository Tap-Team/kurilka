// Code generated by MockGen. DO NOT EDIT.
// Source: manager.go

// Package motivationdatamanager is a generated GoMock package.
package motivationdatamanager

import (
	context "context"
	reflect "reflect"

	model "github.com/Tap-Team/kurilka/workers/userworker/model"
	gomock "github.com/golang/mock/gomock"
)

// MockMotivationStorage is a mock of MotivationStorage interface.
type MockMotivationStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMotivationStorageMockRecorder
}

// MockMotivationStorageMockRecorder is the mock recorder for MockMotivationStorage.
type MockMotivationStorageMockRecorder struct {
	mock *MockMotivationStorage
}

// NewMockMotivationStorage creates a new mock instance.
func NewMockMotivationStorage(ctrl *gomock.Controller) *MockMotivationStorage {
	mock := &MockMotivationStorage{ctrl: ctrl}
	mock.recorder = &MockMotivationStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMotivationStorage) EXPECT() *MockMotivationStorageMockRecorder {
	return m.recorder
}

// NextUserMotivation mocks base method.
func (m *MockMotivationStorage) NextUserMotivation(ctx context.Context, userId int64) (model.Motivation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextUserMotivation", ctx, userId)
	ret0, _ := ret[0].(model.Motivation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextUserMotivation indicates an expected call of NextUserMotivation.
func (mr *MockMotivationStorageMockRecorder) NextUserMotivation(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextUserMotivation", reflect.TypeOf((*MockMotivationStorage)(nil).NextUserMotivation), ctx, userId)
}

// UpdateUserMotivation mocks base method.
func (m *MockMotivationStorage) UpdateUserMotivation(ctx context.Context, userId int64, motivationId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserMotivation", ctx, userId, motivationId)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserMotivation indicates an expected call of UpdateUserMotivation.
func (mr *MockMotivationStorageMockRecorder) UpdateUserMotivation(ctx, userId, motivationId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserMotivation", reflect.TypeOf((*MockMotivationStorage)(nil).UpdateUserMotivation), ctx, userId, motivationId)
}

// MockMotivationCache is a mock of MotivationCache interface.
type MockMotivationCache struct {
	ctrl     *gomock.Controller
	recorder *MockMotivationCacheMockRecorder
}

// MockMotivationCacheMockRecorder is the mock recorder for MockMotivationCache.
type MockMotivationCacheMockRecorder struct {
	mock *MockMotivationCache
}

// NewMockMotivationCache creates a new mock instance.
func NewMockMotivationCache(ctrl *gomock.Controller) *MockMotivationCache {
	mock := &MockMotivationCache{ctrl: ctrl}
	mock.recorder = &MockMotivationCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMotivationCache) EXPECT() *MockMotivationCacheMockRecorder {
	return m.recorder
}

// RemoveUserMotivation mocks base method.
func (m *MockMotivationCache) RemoveUserMotivation(ctx context.Context, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserMotivation", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserMotivation indicates an expected call of RemoveUserMotivation.
func (mr *MockMotivationCacheMockRecorder) RemoveUserMotivation(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserMotivation", reflect.TypeOf((*MockMotivationCache)(nil).RemoveUserMotivation), ctx, userId)
}

// SaveUserMotivation mocks base method.
func (m *MockMotivationCache) SaveUserMotivation(ctx context.Context, userId int64, motivation string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserMotivation", ctx, userId, motivation)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserMotivation indicates an expected call of SaveUserMotivation.
func (mr *MockMotivationCacheMockRecorder) SaveUserMotivation(ctx, userId, motivation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserMotivation", reflect.TypeOf((*MockMotivationCache)(nil).SaveUserMotivation), ctx, userId, motivation)
}

// MockMotivationManager is a mock of MotivationManager interface.
type MockMotivationManager struct {
	ctrl     *gomock.Controller
	recorder *MockMotivationManagerMockRecorder
}

// MockMotivationManagerMockRecorder is the mock recorder for MockMotivationManager.
type MockMotivationManagerMockRecorder struct {
	mock *MockMotivationManager
}

// NewMockMotivationManager creates a new mock instance.
func NewMockMotivationManager(ctrl *gomock.Controller) *MockMotivationManager {
	mock := &MockMotivationManager{ctrl: ctrl}
	mock.recorder = &MockMotivationManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMotivationManager) EXPECT() *MockMotivationManagerMockRecorder {
	return m.recorder
}

// NextUserMotivation mocks base method.
func (m *MockMotivationManager) NextUserMotivation(ctx context.Context, userId int64) (model.Motivation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextUserMotivation", ctx, userId)
	ret0, _ := ret[0].(model.Motivation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextUserMotivation indicates an expected call of NextUserMotivation.
func (mr *MockMotivationManagerMockRecorder) NextUserMotivation(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextUserMotivation", reflect.TypeOf((*MockMotivationManager)(nil).NextUserMotivation), ctx, userId)
}

// UpdateUserMotivation mocks base method.
func (m *MockMotivationManager) UpdateUserMotivation(ctx context.Context, userId int64, motivation model.Motivation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserMotivation", ctx, userId, motivation)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserMotivation indicates an expected call of UpdateUserMotivation.
func (mr *MockMotivationManagerMockRecorder) UpdateUserMotivation(ctx, userId, motivation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserMotivation", reflect.TypeOf((*MockMotivationManager)(nil).UpdateUserMotivation), ctx, userId, motivation)
}
