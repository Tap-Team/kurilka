// Code generated by MockGen. DO NOT EDIT.
// Source: userstorage.go

// Package userstorage is a generated GoMock package.
package userstorage

import (
	reflect "reflect"
	time "time"

	workers "github.com/Tap-Team/kurilka/workers"
	gomock "github.com/golang/mock/gomock"
)

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserStorage) AddUser(user workers.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUser", user)
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserStorageMockRecorder) AddUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserStorage)(nil).AddUser), user)
}

// AddUsers mocks base method.
func (m *MockUserStorage) AddUsers(users []*workers.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddUsers", users)
}

// AddUsers indicates an expected call of AddUsers.
func (mr *MockUserStorageMockRecorder) AddUsers(users interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUsers", reflect.TypeOf((*MockUserStorage)(nil).AddUsers), users)
}

// RemoveUser mocks base method.
func (m *MockUserStorage) RemoveUser(userId int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveUser", userId)
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockUserStorageMockRecorder) RemoveUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockUserStorage)(nil).RemoveUser), userId)
}

// UpdateUserTime mocks base method.
func (m *MockUserStorage) UpdateUserTime(userId int64, t time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateUserTime", userId, t)
}

// UpdateUserTime indicates an expected call of UpdateUserTime.
func (mr *MockUserStorageMockRecorder) UpdateUserTime(userId, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserTime", reflect.TypeOf((*MockUserStorage)(nil).UpdateUserTime), userId, t)
}

// UsersByTime mocks base method.
func (m *MockUserStorage) UsersByTime(t int64) []int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UsersByTime", t)
	ret0, _ := ret[0].([]int64)
	return ret0
}

// UsersByTime indicates an expected call of UsersByTime.
func (mr *MockUserStorageMockRecorder) UsersByTime(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UsersByTime", reflect.TypeOf((*MockUserStorage)(nil).UsersByTime), t)
}
