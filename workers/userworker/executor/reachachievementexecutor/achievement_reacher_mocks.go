// Code generated by MockGen. DO NOT EDIT.
// Source: achievement_reacher.go

// Package reachachievementexecutor is a generated GoMock package.
package reachachievementexecutor

import (
	context "context"
	reflect "reflect"

	achievementmodel "github.com/Tap-Team/kurilka/internal/model/achievementmodel"
	model "github.com/Tap-Team/kurilka/workers/userworker/model"
	gomock "github.com/golang/mock/gomock"
)

// MockAchievementUserReacher is a mock of AchievementUserReacher interface.
type MockAchievementUserReacher struct {
	ctrl     *gomock.Controller
	recorder *MockAchievementUserReacherMockRecorder
}

// MockAchievementUserReacherMockRecorder is the mock recorder for MockAchievementUserReacher.
type MockAchievementUserReacherMockRecorder struct {
	mock *MockAchievementUserReacher
}

// NewMockAchievementUserReacher creates a new mock instance.
func NewMockAchievementUserReacher(ctrl *gomock.Controller) *MockAchievementUserReacher {
	mock := &MockAchievementUserReacher{ctrl: ctrl}
	mock.recorder = &MockAchievementUserReacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAchievementUserReacher) EXPECT() *MockAchievementUserReacherMockRecorder {
	return m.recorder
}

// ReachAchievements mocks base method.
func (m *MockAchievementUserReacher) ReachAchievements(ctx context.Context, userId int64, user *model.UserData, achievements []*achievementmodel.Achievement) []int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReachAchievements", ctx, userId, user, achievements)
	ret0, _ := ret[0].([]int64)
	return ret0
}

// ReachAchievements indicates an expected call of ReachAchievements.
func (mr *MockAchievementUserReacherMockRecorder) ReachAchievements(ctx, userId, user, achievements interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReachAchievements", reflect.TypeOf((*MockAchievementUserReacher)(nil).ReachAchievements), ctx, userId, user, achievements)
}
