// Code generated by MockGen. DO NOT EDIT.
// Source: executor.go

// Package executor is a generated GoMock package.
package executor

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserExecutor is a mock of UserExecutor interface.
type MockUserExecutor struct {
	ctrl     *gomock.Controller
	recorder *MockUserExecutorMockRecorder
}

// MockUserExecutorMockRecorder is the mock recorder for MockUserExecutor.
type MockUserExecutorMockRecorder struct {
	mock *MockUserExecutor
}

// NewMockUserExecutor creates a new mock instance.
func NewMockUserExecutor(ctrl *gomock.Controller) *MockUserExecutor {
	mock := &MockUserExecutor{ctrl: ctrl}
	mock.recorder = &MockUserExecutorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserExecutor) EXPECT() *MockUserExecutorMockRecorder {
	return m.recorder
}

// ExecuteUser mocks base method.
func (m *MockUserExecutor) ExecuteUser(ctx context.Context, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteUser", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteUser indicates an expected call of ExecuteUser.
func (mr *MockUserExecutorMockRecorder) ExecuteUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteUser", reflect.TypeOf((*MockUserExecutor)(nil).ExecuteUser), ctx, userId)
}
