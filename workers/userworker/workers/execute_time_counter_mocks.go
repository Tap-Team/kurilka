// Code generated by MockGen. DO NOT EDIT.
// Source: execute_time_counter.go

// Package workers is a generated GoMock package.
package workers

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockUserExecuteTimeCounter is a mock of UserExecuteTimeCounter interface.
type MockUserExecuteTimeCounter struct {
	ctrl     *gomock.Controller
	recorder *MockUserExecuteTimeCounterMockRecorder
}

// MockUserExecuteTimeCounterMockRecorder is the mock recorder for MockUserExecuteTimeCounter.
type MockUserExecuteTimeCounterMockRecorder struct {
	mock *MockUserExecuteTimeCounter
}

// NewMockUserExecuteTimeCounter creates a new mock instance.
func NewMockUserExecuteTimeCounter(ctrl *gomock.Controller) *MockUserExecuteTimeCounter {
	mock := &MockUserExecuteTimeCounter{ctrl: ctrl}
	mock.recorder = &MockUserExecuteTimeCounterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserExecuteTimeCounter) EXPECT() *MockUserExecuteTimeCounterMockRecorder {
	return m.recorder
}

// CountUserExecuteTime mocks base method.
func (m *MockUserExecuteTimeCounter) CountUserExecuteTime(now, t time.Time) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUserExecuteTime", now, t)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// CountUserExecuteTime indicates an expected call of CountUserExecuteTime.
func (mr *MockUserExecuteTimeCounterMockRecorder) CountUserExecuteTime(now, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUserExecuteTime", reflect.TypeOf((*MockUserExecuteTimeCounter)(nil).CountUserExecuteTime), now, t)
}
