// Code generated by MockGen. DO NOT EDIT.
// Source: privacysetting.go

// Package privacysettingusecase is a generated GoMock package.
package privacysettingusecase

import (
	context "context"
	reflect "reflect"

	usermodel "github.com/Tap-Team/kurilka/internal/model/usermodel"
	gomock "github.com/golang/mock/gomock"
)

// MockPrivacySettingUseCase is a mock of PrivacySettingUseCase interface.
type MockPrivacySettingUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockPrivacySettingUseCaseMockRecorder
}

// MockPrivacySettingUseCaseMockRecorder is the mock recorder for MockPrivacySettingUseCase.
type MockPrivacySettingUseCaseMockRecorder struct {
	mock *MockPrivacySettingUseCase
}

// NewMockPrivacySettingUseCase creates a new mock instance.
func NewMockPrivacySettingUseCase(ctrl *gomock.Controller) *MockPrivacySettingUseCase {
	mock := &MockPrivacySettingUseCase{ctrl: ctrl}
	mock.recorder = &MockPrivacySettingUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivacySettingUseCase) EXPECT() *MockPrivacySettingUseCaseMockRecorder {
	return m.recorder
}

// Switch mocks base method.
func (m *MockPrivacySettingUseCase) Switch(ctx context.Context, userId int64, setting usermodel.PrivacySetting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Switch", ctx, userId, setting)
	ret0, _ := ret[0].(error)
	return ret0
}

// Switch indicates an expected call of Switch.
func (mr *MockPrivacySettingUseCaseMockRecorder) Switch(ctx, userId, setting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Switch", reflect.TypeOf((*MockPrivacySettingUseCase)(nil).Switch), ctx, userId, setting)
}
