// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package statisticsusecase is a generated GoMock package.
package statisticsusecase

import (
	context "context"
	reflect "reflect"

	model "github.com/Tap-Team/kurilka/user/model"
	gomock "github.com/golang/mock/gomock"
)

// MockStatisticsUseCase is a mock of StatisticsUseCase interface.
type MockStatisticsUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockStatisticsUseCaseMockRecorder
}

// MockStatisticsUseCaseMockRecorder is the mock recorder for MockStatisticsUseCase.
type MockStatisticsUseCaseMockRecorder struct {
	mock *MockStatisticsUseCase
}

// NewMockStatisticsUseCase creates a new mock instance.
func NewMockStatisticsUseCase(ctrl *gomock.Controller) *MockStatisticsUseCase {
	mock := &MockStatisticsUseCase{ctrl: ctrl}
	mock.recorder = &MockStatisticsUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatisticsUseCase) EXPECT() *MockStatisticsUseCaseMockRecorder {
	return m.recorder
}

// CigaretteStatistics mocks base method.
func (m *MockStatisticsUseCase) CigaretteStatistics(ctx context.Context, userId int64) (model.IntUserStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CigaretteStatistics", ctx, userId)
	ret0, _ := ret[0].(model.IntUserStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CigaretteStatistics indicates an expected call of CigaretteStatistics.
func (mr *MockStatisticsUseCaseMockRecorder) CigaretteStatistics(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CigaretteStatistics", reflect.TypeOf((*MockStatisticsUseCase)(nil).CigaretteStatistics), ctx, userId)
}

// MoneyStatistics mocks base method.
func (m *MockStatisticsUseCase) MoneyStatistics(ctx context.Context, userId int64) (model.FloatUserStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoneyStatistics", ctx, userId)
	ret0, _ := ret[0].(model.FloatUserStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoneyStatistics indicates an expected call of MoneyStatistics.
func (mr *MockStatisticsUseCaseMockRecorder) MoneyStatistics(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoneyStatistics", reflect.TypeOf((*MockStatisticsUseCase)(nil).MoneyStatistics), ctx, userId)
}

// TimeStatistics mocks base method.
func (m *MockStatisticsUseCase) TimeStatistics(ctx context.Context, userId int64) (model.IntUserStatistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeStatistics", ctx, userId)
	ret0, _ := ret[0].(model.IntUserStatistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TimeStatistics indicates an expected call of TimeStatistics.
func (mr *MockStatisticsUseCaseMockRecorder) TimeStatistics(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeStatistics", reflect.TypeOf((*MockStatisticsUseCase)(nil).TimeStatistics), ctx, userId)
}
