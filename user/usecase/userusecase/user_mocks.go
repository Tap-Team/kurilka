// Code generated by MockGen. DO NOT EDIT.
// Source: ./user/userusecase/user.go

// Package userusecase is a generated GoMock package.
package userusecase

import (
	context "context"
	reflect "reflect"

	usermodel "github.com/Tap-Team/kurilka/internal/model/usermodel"
	gomock "github.com/golang/mock/gomock"
)

// MockUserFriendsProvider is a mock of UserFriendsProvider interface.
type MockUserFriendsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockUserFriendsProviderMockRecorder
}

// MockUserFriendsProviderMockRecorder is the mock recorder for MockUserFriendsProvider.
type MockUserFriendsProviderMockRecorder struct {
	mock *MockUserFriendsProvider
}

// NewMockUserFriendsProvider creates a new mock instance.
func NewMockUserFriendsProvider(ctrl *gomock.Controller) *MockUserFriendsProvider {
	mock := &MockUserFriendsProvider{ctrl: ctrl}
	mock.recorder = &MockUserFriendsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserFriendsProvider) EXPECT() *MockUserFriendsProviderMockRecorder {
	return m.recorder
}

// Friends mocks base method.
func (m *MockUserFriendsProvider) Friends(ctx context.Context, userId int64) []int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Friends", ctx, userId)
	ret0, _ := ret[0].([]int64)
	return ret0
}

// Friends indicates an expected call of Friends.
func (mr *MockUserFriendsProviderMockRecorder) Friends(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Friends", reflect.TypeOf((*MockUserFriendsProvider)(nil).Friends), ctx, userId)
}

// MockFriendProvider is a mock of FriendProvider interface.
type MockFriendProvider struct {
	ctrl     *gomock.Controller
	recorder *MockFriendProviderMockRecorder
}

// MockFriendProviderMockRecorder is the mock recorder for MockFriendProvider.
type MockFriendProviderMockRecorder struct {
	mock *MockFriendProvider
}

// NewMockFriendProvider creates a new mock instance.
func NewMockFriendProvider(ctrl *gomock.Controller) *MockFriendProvider {
	mock := &MockFriendProvider{ctrl: ctrl}
	mock.recorder = &MockFriendProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFriendProvider) EXPECT() *MockFriendProviderMockRecorder {
	return m.recorder
}

// Friend mocks base method.
func (m *MockFriendProvider) Friend(ctx context.Context, userId int64) (*usermodel.Friend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Friend", ctx, userId)
	ret0, _ := ret[0].(*usermodel.Friend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Friend indicates an expected call of Friend.
func (mr *MockFriendProviderMockRecorder) Friend(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Friend", reflect.TypeOf((*MockFriendProvider)(nil).Friend), ctx, userId)
}

// MockUserUseCase is a mock of UserUseCase interface.
type MockUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUserUseCaseMockRecorder
}

// MockUserUseCaseMockRecorder is the mock recorder for MockUserUseCase.
type MockUserUseCaseMockRecorder struct {
	mock *MockUserUseCase
}

// NewMockUserUseCase creates a new mock instance.
func NewMockUserUseCase(ctrl *gomock.Controller) *MockUserUseCase {
	mock := &MockUserUseCase{ctrl: ctrl}
	mock.recorder = &MockUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserUseCase) EXPECT() *MockUserUseCaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserUseCase) Create(ctx context.Context, userId int64, createUser *usermodel.CreateUser) (*usermodel.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userId, createUser)
	ret0, _ := ret[0].(*usermodel.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserUseCaseMockRecorder) Create(ctx, userId, createUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserUseCase)(nil).Create), ctx, userId, createUser)
}

// Friends mocks base method.
func (m *MockUserUseCase) Friends(ctx context.Context, friendsIds []int64) []*usermodel.Friend {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Friends", ctx, friendsIds)
	ret0, _ := ret[0].([]*usermodel.Friend)
	return ret0
}

// Friends indicates an expected call of Friends.
func (mr *MockUserUseCaseMockRecorder) Friends(ctx, friendsIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Friends", reflect.TypeOf((*MockUserUseCase)(nil).Friends), ctx, friendsIds)
}

// Level mocks base method.
func (m *MockUserUseCase) Level(ctx context.Context, userId int64) (*usermodel.LevelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Level", ctx, userId)
	ret0, _ := ret[0].(*usermodel.LevelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Level indicates an expected call of Level.
func (mr *MockUserUseCaseMockRecorder) Level(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Level", reflect.TypeOf((*MockUserUseCase)(nil).Level), ctx, userId)
}

// Reset mocks base method.
func (m *MockUserUseCase) Reset(ctx context.Context, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockUserUseCaseMockRecorder) Reset(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockUserUseCase)(nil).Reset), ctx, userId)
}

// User mocks base method.
func (m *MockUserUseCase) User(ctx context.Context, userId int64) (*usermodel.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", ctx, userId)
	ret0, _ := ret[0].(*usermodel.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockUserUseCaseMockRecorder) User(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockUserUseCase)(nil).User), ctx, userId)
}
