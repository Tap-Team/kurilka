// Code generated by MockGen. DO NOT EDIT.
// Source: trigger_manager.go

// Package triggerdatamanager is a generated GoMock package.
package triggerdatamanager

import (
	context "context"
	reflect "reflect"

	usermodel "github.com/Tap-Team/kurilka/internal/model/usermodel"
	gomock "github.com/golang/mock/gomock"
)

// MockTriggerCache is a mock of TriggerCache interface.
type MockTriggerCache struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerCacheMockRecorder
}

// MockTriggerCacheMockRecorder is the mock recorder for MockTriggerCache.
type MockTriggerCacheMockRecorder struct {
	mock *MockTriggerCache
}

// NewMockTriggerCache creates a new mock instance.
func NewMockTriggerCache(ctrl *gomock.Controller) *MockTriggerCache {
	mock := &MockTriggerCache{ctrl: ctrl}
	mock.recorder = &MockTriggerCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriggerCache) EXPECT() *MockTriggerCacheMockRecorder {
	return m.recorder
}

// RemoveUserTriggers mocks base method.
func (m *MockTriggerCache) RemoveUserTriggers(ctx context.Context, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserTriggers", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserTriggers indicates an expected call of RemoveUserTriggers.
func (mr *MockTriggerCacheMockRecorder) RemoveUserTriggers(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserTriggers", reflect.TypeOf((*MockTriggerCache)(nil).RemoveUserTriggers), ctx, userId)
}

// SaveUserTriggers mocks base method.
func (m *MockTriggerCache) SaveUserTriggers(ctx context.Context, userId int64, triggers []usermodel.Trigger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserTriggers", ctx, userId, triggers)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserTriggers indicates an expected call of SaveUserTriggers.
func (mr *MockTriggerCacheMockRecorder) SaveUserTriggers(ctx, userId, triggers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserTriggers", reflect.TypeOf((*MockTriggerCache)(nil).SaveUserTriggers), ctx, userId, triggers)
}

// UserTriggers mocks base method.
func (m *MockTriggerCache) UserTriggers(ctx context.Context, userId int64) ([]usermodel.Trigger, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserTriggers", ctx, userId)
	ret0, _ := ret[0].([]usermodel.Trigger)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserTriggers indicates an expected call of UserTriggers.
func (mr *MockTriggerCacheMockRecorder) UserTriggers(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserTriggers", reflect.TypeOf((*MockTriggerCache)(nil).UserTriggers), ctx, userId)
}

// MockTriggerStorage is a mock of TriggerStorage interface.
type MockTriggerStorage struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerStorageMockRecorder
}

// MockTriggerStorageMockRecorder is the mock recorder for MockTriggerStorage.
type MockTriggerStorageMockRecorder struct {
	mock *MockTriggerStorage
}

// NewMockTriggerStorage creates a new mock instance.
func NewMockTriggerStorage(ctrl *gomock.Controller) *MockTriggerStorage {
	mock := &MockTriggerStorage{ctrl: ctrl}
	mock.recorder = &MockTriggerStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriggerStorage) EXPECT() *MockTriggerStorageMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTriggerStorage) Add(ctx context.Context, userId int64, trigger usermodel.Trigger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, userId, trigger)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTriggerStorageMockRecorder) Add(ctx, userId, trigger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTriggerStorage)(nil).Add), ctx, userId, trigger)
}

// Remove mocks base method.
func (m *MockTriggerStorage) Remove(ctx context.Context, userId int64, trigger usermodel.Trigger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, userId, trigger)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockTriggerStorageMockRecorder) Remove(ctx, userId, trigger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockTriggerStorage)(nil).Remove), ctx, userId, trigger)
}

// MockTriggerManager is a mock of TriggerManager interface.
type MockTriggerManager struct {
	ctrl     *gomock.Controller
	recorder *MockTriggerManagerMockRecorder
}

// MockTriggerManagerMockRecorder is the mock recorder for MockTriggerManager.
type MockTriggerManagerMockRecorder struct {
	mock *MockTriggerManager
}

// NewMockTriggerManager creates a new mock instance.
func NewMockTriggerManager(ctrl *gomock.Controller) *MockTriggerManager {
	mock := &MockTriggerManager{ctrl: ctrl}
	mock.recorder = &MockTriggerManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTriggerManager) EXPECT() *MockTriggerManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTriggerManager) Add(ctx context.Context, userId int64, trigger usermodel.Trigger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, userId, trigger)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockTriggerManagerMockRecorder) Add(ctx, userId, trigger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTriggerManager)(nil).Add), ctx, userId, trigger)
}

// Remove mocks base method.
func (m *MockTriggerManager) Remove(ctx context.Context, userId int64, trigger usermodel.Trigger) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, userId, trigger)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockTriggerManagerMockRecorder) Remove(ctx, userId, trigger interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockTriggerManager)(nil).Remove), ctx, userId, trigger)
}
