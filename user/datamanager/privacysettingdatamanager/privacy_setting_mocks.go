// Code generated by MockGen. DO NOT EDIT.
// Source: ./user/privacysettingdatamanager/privacy_setting_manager.go

// Package privacysettingdatamanager is a generated GoMock package.
package privacysettingdatamanager

import (
	context "context"
	reflect "reflect"

	usermodel "github.com/Tap-Team/kurilka/internal/model/usermodel"
	gomock "github.com/golang/mock/gomock"
)

// MockPrivacySettingStorage is a mock of PrivacySettingStorage interface.
type MockPrivacySettingStorage struct {
	ctrl     *gomock.Controller
	recorder *MockPrivacySettingStorageMockRecorder
}

// MockPrivacySettingStorageMockRecorder is the mock recorder for MockPrivacySettingStorage.
type MockPrivacySettingStorageMockRecorder struct {
	mock *MockPrivacySettingStorage
}

// NewMockPrivacySettingStorage creates a new mock instance.
func NewMockPrivacySettingStorage(ctrl *gomock.Controller) *MockPrivacySettingStorage {
	mock := &MockPrivacySettingStorage{ctrl: ctrl}
	mock.recorder = &MockPrivacySettingStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivacySettingStorage) EXPECT() *MockPrivacySettingStorageMockRecorder {
	return m.recorder
}

// AddUserPrivacySetting mocks base method.
func (m *MockPrivacySettingStorage) AddUserPrivacySetting(ctx context.Context, userId int64, setting usermodel.PrivacySetting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserPrivacySetting", ctx, userId, setting)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserPrivacySetting indicates an expected call of AddUserPrivacySetting.
func (mr *MockPrivacySettingStorageMockRecorder) AddUserPrivacySetting(ctx, userId, setting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserPrivacySetting", reflect.TypeOf((*MockPrivacySettingStorage)(nil).AddUserPrivacySetting), ctx, userId, setting)
}

// RemoveUserPrivacySetting mocks base method.
func (m *MockPrivacySettingStorage) RemoveUserPrivacySetting(ctx context.Context, userId int64, setting usermodel.PrivacySetting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserPrivacySetting", ctx, userId, setting)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserPrivacySetting indicates an expected call of RemoveUserPrivacySetting.
func (mr *MockPrivacySettingStorageMockRecorder) RemoveUserPrivacySetting(ctx, userId, setting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserPrivacySetting", reflect.TypeOf((*MockPrivacySettingStorage)(nil).RemoveUserPrivacySetting), ctx, userId, setting)
}

// UserPrivacySettings mocks base method.
func (m *MockPrivacySettingStorage) UserPrivacySettings(ctx context.Context, userId int64) ([]usermodel.PrivacySetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserPrivacySettings", ctx, userId)
	ret0, _ := ret[0].([]usermodel.PrivacySetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserPrivacySettings indicates an expected call of UserPrivacySettings.
func (mr *MockPrivacySettingStorageMockRecorder) UserPrivacySettings(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPrivacySettings", reflect.TypeOf((*MockPrivacySettingStorage)(nil).UserPrivacySettings), ctx, userId)
}

// MockPrivacySettingCache is a mock of PrivacySettingCache interface.
type MockPrivacySettingCache struct {
	ctrl     *gomock.Controller
	recorder *MockPrivacySettingCacheMockRecorder
}

// MockPrivacySettingCacheMockRecorder is the mock recorder for MockPrivacySettingCache.
type MockPrivacySettingCacheMockRecorder struct {
	mock *MockPrivacySettingCache
}

// NewMockPrivacySettingCache creates a new mock instance.
func NewMockPrivacySettingCache(ctrl *gomock.Controller) *MockPrivacySettingCache {
	mock := &MockPrivacySettingCache{ctrl: ctrl}
	mock.recorder = &MockPrivacySettingCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivacySettingCache) EXPECT() *MockPrivacySettingCacheMockRecorder {
	return m.recorder
}

// RemoveUserPrivacySettings mocks base method.
func (m *MockPrivacySettingCache) RemoveUserPrivacySettings(ctx context.Context, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUserPrivacySettings", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUserPrivacySettings indicates an expected call of RemoveUserPrivacySettings.
func (mr *MockPrivacySettingCacheMockRecorder) RemoveUserPrivacySettings(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUserPrivacySettings", reflect.TypeOf((*MockPrivacySettingCache)(nil).RemoveUserPrivacySettings), ctx, userId)
}

// SaveUserPrivacySettings mocks base method.
func (m *MockPrivacySettingCache) SaveUserPrivacySettings(ctx context.Context, userId int64, settings []usermodel.PrivacySetting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUserPrivacySettings", ctx, userId, settings)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUserPrivacySettings indicates an expected call of SaveUserPrivacySettings.
func (mr *MockPrivacySettingCacheMockRecorder) SaveUserPrivacySettings(ctx, userId, settings interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUserPrivacySettings", reflect.TypeOf((*MockPrivacySettingCache)(nil).SaveUserPrivacySettings), ctx, userId, settings)
}

// UserPrivacySettings mocks base method.
func (m *MockPrivacySettingCache) UserPrivacySettings(ctx context.Context, userId int64) ([]usermodel.PrivacySetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserPrivacySettings", ctx, userId)
	ret0, _ := ret[0].([]usermodel.PrivacySetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserPrivacySettings indicates an expected call of UserPrivacySettings.
func (mr *MockPrivacySettingCacheMockRecorder) UserPrivacySettings(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserPrivacySettings", reflect.TypeOf((*MockPrivacySettingCache)(nil).UserPrivacySettings), ctx, userId)
}

// MockPrivacySettingManager is a mock of PrivacySettingManager interface.
type MockPrivacySettingManager struct {
	ctrl     *gomock.Controller
	recorder *MockPrivacySettingManagerMockRecorder
}

// MockPrivacySettingManagerMockRecorder is the mock recorder for MockPrivacySettingManager.
type MockPrivacySettingManagerMockRecorder struct {
	mock *MockPrivacySettingManager
}

// NewMockPrivacySettingManager creates a new mock instance.
func NewMockPrivacySettingManager(ctrl *gomock.Controller) *MockPrivacySettingManager {
	mock := &MockPrivacySettingManager{ctrl: ctrl}
	mock.recorder = &MockPrivacySettingManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivacySettingManager) EXPECT() *MockPrivacySettingManagerMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockPrivacySettingManager) Add(ctx context.Context, userId int64, setting usermodel.PrivacySetting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, userId, setting)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockPrivacySettingManagerMockRecorder) Add(ctx, userId, setting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockPrivacySettingManager)(nil).Add), ctx, userId, setting)
}

// Clear mocks base method.
func (m *MockPrivacySettingManager) Clear(ctx context.Context, userId int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear", ctx, userId)
}

// Clear indicates an expected call of Clear.
func (mr *MockPrivacySettingManagerMockRecorder) Clear(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockPrivacySettingManager)(nil).Clear), ctx, userId)
}

// PrivacySettings mocks base method.
func (m *MockPrivacySettingManager) PrivacySettings(ctx context.Context, userId int64) ([]usermodel.PrivacySetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivacySettings", ctx, userId)
	ret0, _ := ret[0].([]usermodel.PrivacySetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivacySettings indicates an expected call of PrivacySettings.
func (mr *MockPrivacySettingManagerMockRecorder) PrivacySettings(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivacySettings", reflect.TypeOf((*MockPrivacySettingManager)(nil).PrivacySettings), ctx, userId)
}

// Remove mocks base method.
func (m *MockPrivacySettingManager) Remove(ctx context.Context, userId int64, setting usermodel.PrivacySetting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, userId, setting)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockPrivacySettingManagerMockRecorder) Remove(ctx, userId, setting interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPrivacySettingManager)(nil).Remove), ctx, userId, setting)
}
