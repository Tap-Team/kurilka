// Code generated by MockGen. DO NOT EDIT.
// Source: ./user/userdatamanager/user_manager.go

// Package userdatamanager is a generated GoMock package.
package userdatamanager

import (
	context "context"
	reflect "reflect"

	usermodel "github.com/Tap-Team/kurilka/internal/model/usermodel"
	gomock "github.com/golang/mock/gomock"
)

// MockUserReseter is a mock of UserReseter interface.
type MockUserReseter struct {
	ctrl     *gomock.Controller
	recorder *MockUserReseterMockRecorder
}

// MockUserReseterMockRecorder is the mock recorder for MockUserReseter.
type MockUserReseterMockRecorder struct {
	mock *MockUserReseter
}

// NewMockUserReseter creates a new mock instance.
func NewMockUserReseter(ctrl *gomock.Controller) *MockUserReseter {
	mock := &MockUserReseter{ctrl: ctrl}
	mock.recorder = &MockUserReseterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserReseter) EXPECT() *MockUserReseterMockRecorder {
	return m.recorder
}

// ResetUser mocks base method.
func (m *MockUserReseter) ResetUser(ctx context.Context, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetUser", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetUser indicates an expected call of ResetUser.
func (mr *MockUserReseterMockRecorder) ResetUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetUser", reflect.TypeOf((*MockUserReseter)(nil).ResetUser), ctx, userId)
}

// MockUserRecoverer is a mock of UserRecoverer interface.
type MockUserRecoverer struct {
	ctrl     *gomock.Controller
	recorder *MockUserRecovererMockRecorder
}

// MockUserRecovererMockRecorder is the mock recorder for MockUserRecoverer.
type MockUserRecovererMockRecorder struct {
	mock *MockUserRecoverer
}

// NewMockUserRecoverer creates a new mock instance.
func NewMockUserRecoverer(ctrl *gomock.Controller) *MockUserRecoverer {
	mock := &MockUserRecoverer{ctrl: ctrl}
	mock.recorder = &MockUserRecovererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRecoverer) EXPECT() *MockUserRecovererMockRecorder {
	return m.recorder
}

// RecoverUser mocks base method.
func (m *MockUserRecoverer) RecoverUser(ctx context.Context, userId int64, createUser *usermodel.CreateUser) (*usermodel.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverUser", ctx, userId, createUser)
	ret0, _ := ret[0].(*usermodel.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecoverUser indicates an expected call of RecoverUser.
func (mr *MockUserRecovererMockRecorder) RecoverUser(ctx, userId, createUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverUser", reflect.TypeOf((*MockUserRecoverer)(nil).RecoverUser), ctx, userId, createUser)
}

// MockUserRecoverReseter is a mock of UserRecoverReseter interface.
type MockUserRecoverReseter struct {
	ctrl     *gomock.Controller
	recorder *MockUserRecoverReseterMockRecorder
}

// MockUserRecoverReseterMockRecorder is the mock recorder for MockUserRecoverReseter.
type MockUserRecoverReseterMockRecorder struct {
	mock *MockUserRecoverReseter
}

// NewMockUserRecoverReseter creates a new mock instance.
func NewMockUserRecoverReseter(ctrl *gomock.Controller) *MockUserRecoverReseter {
	mock := &MockUserRecoverReseter{ctrl: ctrl}
	mock.recorder = &MockUserRecoverReseterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRecoverReseter) EXPECT() *MockUserRecoverReseterMockRecorder {
	return m.recorder
}

// RecoverUser mocks base method.
func (m *MockUserRecoverReseter) RecoverUser(ctx context.Context, userId int64, createUser *usermodel.CreateUser) (*usermodel.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecoverUser", ctx, userId, createUser)
	ret0, _ := ret[0].(*usermodel.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecoverUser indicates an expected call of RecoverUser.
func (mr *MockUserRecoverReseterMockRecorder) RecoverUser(ctx, userId, createUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecoverUser", reflect.TypeOf((*MockUserRecoverReseter)(nil).RecoverUser), ctx, userId, createUser)
}

// ResetUser mocks base method.
func (m *MockUserRecoverReseter) ResetUser(ctx context.Context, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetUser", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetUser indicates an expected call of ResetUser.
func (mr *MockUserRecoverReseterMockRecorder) ResetUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetUser", reflect.TypeOf((*MockUserRecoverReseter)(nil).ResetUser), ctx, userId)
}

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockUserStorage) Exists(ctx context.Context, userIds []int64) []int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, userIds)
	ret0, _ := ret[0].([]int64)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockUserStorageMockRecorder) Exists(ctx, userIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockUserStorage)(nil).Exists), ctx, userIds)
}

// InsertUser mocks base method.
func (m *MockUserStorage) InsertUser(ctx context.Context, userId int64, user *usermodel.CreateUser) (*usermodel.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, userId, user)
	ret0, _ := ret[0].(*usermodel.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockUserStorageMockRecorder) InsertUser(ctx, userId, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*MockUserStorage)(nil).InsertUser), ctx, userId, user)
}

// User mocks base method.
func (m *MockUserStorage) User(ctx context.Context, userId int64) (*usermodel.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", ctx, userId)
	ret0, _ := ret[0].(*usermodel.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockUserStorageMockRecorder) User(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockUserStorage)(nil).User), ctx, userId)
}

// UserDeleted mocks base method.
func (m *MockUserStorage) UserDeleted(ctx context.Context, userId int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserDeleted", ctx, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserDeleted indicates an expected call of UserDeleted.
func (mr *MockUserStorageMockRecorder) UserDeleted(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserDeleted", reflect.TypeOf((*MockUserStorage)(nil).UserDeleted), ctx, userId)
}

// UserLevel mocks base method.
func (m *MockUserStorage) UserLevel(ctx context.Context, userId int64) (*usermodel.LevelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLevel", ctx, userId)
	ret0, _ := ret[0].(*usermodel.LevelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLevel indicates an expected call of UserLevel.
func (mr *MockUserStorageMockRecorder) UserLevel(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLevel", reflect.TypeOf((*MockUserStorage)(nil).UserLevel), ctx, userId)
}

// MockUserCache is a mock of UserCache interface.
type MockUserCache struct {
	ctrl     *gomock.Controller
	recorder *MockUserCacheMockRecorder
}

// MockUserCacheMockRecorder is the mock recorder for MockUserCache.
type MockUserCacheMockRecorder struct {
	mock *MockUserCache
}

// NewMockUserCache creates a new mock instance.
func NewMockUserCache(ctrl *gomock.Controller) *MockUserCache {
	mock := &MockUserCache{ctrl: ctrl}
	mock.recorder = &MockUserCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCache) EXPECT() *MockUserCacheMockRecorder {
	return m.recorder
}

// RemoveUser mocks base method.
func (m *MockUserCache) RemoveUser(ctx context.Context, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockUserCacheMockRecorder) RemoveUser(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockUserCache)(nil).RemoveUser), ctx, userId)
}

// SaveUser mocks base method.
func (m *MockUserCache) SaveUser(ctx context.Context, userId int64, user *usermodel.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUser", ctx, userId, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockUserCacheMockRecorder) SaveUser(ctx, userId, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockUserCache)(nil).SaveUser), ctx, userId, user)
}

// User mocks base method.
func (m *MockUserCache) User(ctx context.Context, userId int64) (*usermodel.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", ctx, userId)
	ret0, _ := ret[0].(*usermodel.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockUserCacheMockRecorder) User(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockUserCache)(nil).User), ctx, userId)
}

// MockUserManager is a mock of UserManager interface.
type MockUserManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagerMockRecorder
}

// MockUserManagerMockRecorder is the mock recorder for MockUserManager.
type MockUserManagerMockRecorder struct {
	mock *MockUserManager
}

// NewMockUserManager creates a new mock instance.
func NewMockUserManager(ctrl *gomock.Controller) *MockUserManager {
	mock := &MockUserManager{ctrl: ctrl}
	mock.recorder = &MockUserManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserManager) EXPECT() *MockUserManagerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUserManager) Create(ctx context.Context, userId int64, user *usermodel.CreateUser) (*usermodel.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, userId, user)
	ret0, _ := ret[0].(*usermodel.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUserManagerMockRecorder) Create(ctx, userId, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserManager)(nil).Create), ctx, userId, user)
}

// FilterExists mocks base method.
func (m *MockUserManager) FilterExists(ctx context.Context, userIds []int64) []int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterExists", ctx, userIds)
	ret0, _ := ret[0].([]int64)
	return ret0
}

// FilterExists indicates an expected call of FilterExists.
func (mr *MockUserManagerMockRecorder) FilterExists(ctx, userIds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterExists", reflect.TypeOf((*MockUserManager)(nil).FilterExists), ctx, userIds)
}

// Level mocks base method.
func (m *MockUserManager) Level(ctx context.Context, userId int64) (*usermodel.LevelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Level", ctx, userId)
	ret0, _ := ret[0].(*usermodel.LevelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Level indicates an expected call of Level.
func (mr *MockUserManagerMockRecorder) Level(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Level", reflect.TypeOf((*MockUserManager)(nil).Level), ctx, userId)
}

// Reset mocks base method.
func (m *MockUserManager) Reset(ctx context.Context, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reset", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reset indicates an expected call of Reset.
func (mr *MockUserManagerMockRecorder) Reset(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockUserManager)(nil).Reset), ctx, userId)
}

// User mocks base method.
func (m *MockUserManager) User(ctx context.Context, userId int64) (*usermodel.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User", ctx, userId)
	ret0, _ := ret[0].(*usermodel.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// User indicates an expected call of User.
func (mr *MockUserManagerMockRecorder) User(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockUserManager)(nil).User), ctx, userId)
}

// MockUserSaver is a mock of UserSaver interface.
type MockUserSaver struct {
	ctrl     *gomock.Controller
	recorder *MockUserSaverMockRecorder
}

// MockUserSaverMockRecorder is the mock recorder for MockUserSaver.
type MockUserSaverMockRecorder struct {
	mock *MockUserSaver
}

// NewMockUserSaver creates a new mock instance.
func NewMockUserSaver(ctrl *gomock.Controller) *MockUserSaver {
	mock := &MockUserSaver{ctrl: ctrl}
	mock.recorder = &MockUserSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserSaver) EXPECT() *MockUserSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockUserSaver) Save(ctx context.Context, userId int64, createUser *usermodel.CreateUser) (*usermodel.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, userId, createUser)
	ret0, _ := ret[0].(*usermodel.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockUserSaverMockRecorder) Save(ctx, userId, createUser interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUserSaver)(nil).Save), ctx, userId, createUser)
}
