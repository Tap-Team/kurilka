// Code generated by MockGen. DO NOT EDIT.
// Source: ./user/datamanager/achievement_manager.go

// Package datamanager is a generated GoMock package.
package achievementdatamanager

import (
	context "context"
	reflect "reflect"

	usermodel "github.com/Tap-Team/kurilka/internal/model/usermodel"
	gomock "github.com/golang/mock/gomock"
)

// MockAchievementStorage is a mock of AchievementStorage interface.
type MockAchievementStorage struct {
	ctrl     *gomock.Controller
	recorder *MockAchievementStorageMockRecorder
}

// MockAchievementStorageMockRecorder is the mock recorder for MockAchievementStorage.
type MockAchievementStorageMockRecorder struct {
	mock *MockAchievementStorage
}

// NewMockAchievementStorage creates a new mock instance.
func NewMockAchievementStorage(ctrl *gomock.Controller) *MockAchievementStorage {
	mock := &MockAchievementStorage{ctrl: ctrl}
	mock.recorder = &MockAchievementStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAchievementStorage) EXPECT() *MockAchievementStorageMockRecorder {
	return m.recorder
}

// AchievementPreview mocks base method.
func (m *MockAchievementStorage) AchievementPreview(ctx context.Context, userId int64) []*usermodel.Achievement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AchievementPreview", ctx, userId)
	ret0, _ := ret[0].([]*usermodel.Achievement)
	return ret0
}

// AchievementPreview indicates an expected call of AchievementPreview.
func (mr *MockAchievementStorageMockRecorder) AchievementPreview(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AchievementPreview", reflect.TypeOf((*MockAchievementStorage)(nil).AchievementPreview), ctx, userId)
}

// MockAchievementCache is a mock of AchievementCache interface.
type MockAchievementCache struct {
	ctrl     *gomock.Controller
	recorder *MockAchievementCacheMockRecorder
}

// MockAchievementCacheMockRecorder is the mock recorder for MockAchievementCache.
type MockAchievementCacheMockRecorder struct {
	mock *MockAchievementCache
}

// NewMockAchievementCache creates a new mock instance.
func NewMockAchievementCache(ctrl *gomock.Controller) *MockAchievementCache {
	mock := &MockAchievementCache{ctrl: ctrl}
	mock.recorder = &MockAchievementCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAchievementCache) EXPECT() *MockAchievementCacheMockRecorder {
	return m.recorder
}

// AchievementPreview mocks base method.
func (m *MockAchievementCache) AchievementPreview(ctx context.Context, userId int64) ([]*usermodel.Achievement, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AchievementPreview", ctx, userId)
	ret0, _ := ret[0].([]*usermodel.Achievement)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AchievementPreview indicates an expected call of AchievementPreview.
func (mr *MockAchievementCacheMockRecorder) AchievementPreview(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AchievementPreview", reflect.TypeOf((*MockAchievementCache)(nil).AchievementPreview), ctx, userId)
}

// Delete mocks base method.
func (m *MockAchievementCache) Delete(ctx context.Context, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAchievementCacheMockRecorder) Delete(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAchievementCache)(nil).Delete), ctx, userId)
}

// MockAchievementManager is a mock of AchievementManager interface.
type MockAchievementManager struct {
	ctrl     *gomock.Controller
	recorder *MockAchievementManagerMockRecorder
}

// MockAchievementManagerMockRecorder is the mock recorder for MockAchievementManager.
type MockAchievementManagerMockRecorder struct {
	mock *MockAchievementManager
}

// NewMockAchievementManager creates a new mock instance.
func NewMockAchievementManager(ctrl *gomock.Controller) *MockAchievementManager {
	mock := &MockAchievementManager{ctrl: ctrl}
	mock.recorder = &MockAchievementManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAchievementManager) EXPECT() *MockAchievementManagerMockRecorder {
	return m.recorder
}

// AchievementPreview mocks base method.
func (m *MockAchievementManager) AchievementPreview(ctx context.Context, userId int64) []*usermodel.Achievement {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AchievementPreview", ctx, userId)
	ret0, _ := ret[0].([]*usermodel.Achievement)
	return ret0
}

// AchievementPreview indicates an expected call of AchievementPreview.
func (mr *MockAchievementManagerMockRecorder) AchievementPreview(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AchievementPreview", reflect.TypeOf((*MockAchievementManager)(nil).AchievementPreview), ctx, userId)
}

// Clear mocks base method.
func (m *MockAchievementManager) Clear(ctx context.Context, userId int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clear", ctx, userId)
}

// Clear indicates an expected call of Clear.
func (mr *MockAchievementManagerMockRecorder) Clear(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockAchievementManager)(nil).Clear), ctx, userId)
}
