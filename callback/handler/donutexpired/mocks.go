// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package donutexpired is a generated GoMock package.
package donutexpired

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCleaner is a mock of Cleaner interface.
type MockCleaner struct {
	ctrl     *gomock.Controller
	recorder *MockCleanerMockRecorder
}

// MockCleanerMockRecorder is the mock recorder for MockCleaner.
type MockCleanerMockRecorder struct {
	mock *MockCleaner
}

// NewMockCleaner creates a new mock instance.
func NewMockCleaner(ctrl *gomock.Controller) *MockCleaner {
	mock := &MockCleaner{ctrl: ctrl}
	mock.recorder = &MockCleanerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCleaner) EXPECT() *MockCleanerMockRecorder {
	return m.recorder
}

// CleanSubscription mocks base method.
func (m *MockCleaner) CleanSubscription(ctx context.Context, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanSubscription", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanSubscription indicates an expected call of CleanSubscription.
func (mr *MockCleanerMockRecorder) CleanSubscription(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanSubscription", reflect.TypeOf((*MockCleaner)(nil).CleanSubscription), ctx, userId)
}
