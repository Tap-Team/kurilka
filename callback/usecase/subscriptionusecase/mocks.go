// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package subscriptionusecase is a generated GoMock package.
package subscriptionusecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCase is a mock of UseCase interface.
type MockUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseMockRecorder
}

// MockUseCaseMockRecorder is the mock recorder for MockUseCase.
type MockUseCaseMockRecorder struct {
	mock *MockUseCase
}

// NewMockUseCase creates a new mock instance.
func NewMockUseCase(ctrl *gomock.Controller) *MockUseCase {
	mock := &MockUseCase{ctrl: ctrl}
	mock.recorder = &MockUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCase) EXPECT() *MockUseCaseMockRecorder {
	return m.recorder
}

// CleanSubscription mocks base method.
func (m *MockUseCase) CleanSubscription(ctx context.Context, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanSubscription", ctx, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanSubscription indicates an expected call of CleanSubscription.
func (mr *MockUseCaseMockRecorder) CleanSubscription(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanSubscription", reflect.TypeOf((*MockUseCase)(nil).CleanSubscription), ctx, userId)
}

// CreateSubscription mocks base method.
func (m *MockUseCase) CreateSubscription(ctx context.Context, userId int64, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, userId, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockUseCaseMockRecorder) CreateSubscription(ctx, userId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockUseCase)(nil).CreateSubscription), ctx, userId, amount)
}

// ProlongSubscription mocks base method.
func (m *MockUseCase) ProlongSubscription(ctx context.Context, userId int64, amount float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProlongSubscription", ctx, userId, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProlongSubscription indicates an expected call of ProlongSubscription.
func (mr *MockUseCaseMockRecorder) ProlongSubscription(ctx, userId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProlongSubscription", reflect.TypeOf((*MockUseCase)(nil).ProlongSubscription), ctx, userId, amount)
}

// SetSubscriptionMonthCost mocks base method.
func (m *MockUseCase) SetSubscriptionMonthCost(cost int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetSubscriptionMonthCost", cost)
}

// SetSubscriptionMonthCost indicates an expected call of SetSubscriptionMonthCost.
func (mr *MockUseCaseMockRecorder) SetSubscriptionMonthCost(cost interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSubscriptionMonthCost", reflect.TypeOf((*MockUseCase)(nil).SetSubscriptionMonthCost), cost)
}
